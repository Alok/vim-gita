let s:V = vital#of('vital')
let s:Path = s:V.import('System.Filepath')
let s:filename = s:Path.realpath('test/vital/Git/BlameParser/blame.txt')

Describe Git.BlameParser
  Before
    let BlameParser = s:V.import('Git.BlameParser')
    let blame = readfile(s:filename)

    let g:VitalGitBlameParserCalledWith = []
    function! VitalGitBlameParserCallback(...) abort
      call add(g:VitalGitBlameParserCalledWith, a:000)
    endfunction
  End
  After
    unlet g:VitalGitBlameParserCalledWith
    delfunction VitalGitBlameParserCallback
  End

  Describe .parse({blame}[, {callback}])
    It should parse a blame output and return lineinfos
      let blameobj = BlameParser.parse(blame)
      Assert KeyExists(blameobj, 'revisions')
      Assert KeyExists(blameobj, 'lineinfos')
      Assert Equals(len(blameobj.revisions), 6)
      Assert Equals(blameobj.revisions['b6046d9340852c570b9cad13bbdddd2dd5bac8f8'], {
            \ 'author': 'lambdalisue',
            \ 'author_mail': '<lambdalisue@hashnote.net>',
            \ 'author_time': '1426159163',
            \ 'author_tz': '+0900',
            \ 'committer': 'lambdalisue',
            \ 'committer_mail': '<lambdalisue@hashnote.net>',
            \ 'committer_time': '1426159163',
            \ 'committer_tz': '+0900',
            \ 'summary': 'travis-ci use Vim 7.3.',
            \ 'previous': '8eacdabdd0765e910b59662c36d73401e3fda9e8 README.md',
            \ 'filename': 'README.md',
            \})
      Assert Equals(blameobj.revisions['8a7be73ccc36d10526ec3d31a4fde1043815a784'], {
            \ 'author': 'lambdalisue',
            \ 'author_mail': '<lambdalisue@hashnote.net>',
            \ 'author_time': '1419974246',
            \ 'author_tz': '+0900',
            \ 'committer': 'lambdalisue',
            \ 'committer_mail': '<lambdalisue@hashnote.net>',
            \ 'committer_time': '1419974356',
            \ 'committer_tz': '+0900',
            \ 'summary': 'Initial',
            \ 'boundary': 1,
            \ 'filename': 'README.md',
            \})
      Assert Equals(blameobj.revisions['d0af4b00b66f56a4a560e41968f3e362df3c1a0e'], {
            \ 'author': 'lambdalisue',
            \ 'author_mail': '<lambdalisue@hashnote.net>',
            \ 'author_time': '1426159219',
            \ 'author_tz': '+0900',
            \ 'committer': 'lambdalisue',
            \ 'committer_mail': '<lambdalisue@hashnote.net>',
            \ 'committer_time': '1426159219',
            \ 'committer_tz': '+0900',
            \ 'summary': 'Fix Markdown',
            \ 'previous': 'b6046d9340852c570b9cad13bbdddd2dd5bac8f8 README.md',
            \ 'filename': 'README.md',
            \})
      Assert Equals(len(blameobj.lineinfos), 135)
      Assert Equals(blameobj.lineinfos[0], {
            \ 'revision': 'b6046d9340852c570b9cad13bbdddd2dd5bac8f8',
            \ 'linenum': {
            \   'original': 1,
            \   'final': 1,
            \ },
            \ 'nlines': 1,
            \ 'contents': 'vital-VCS-Git [![Build Status](https://travis-ci.org/lambdalisue/vital-VCS-Git.svg)](https://travis-ci.org/lambdalisue/vital-VCS-Git)',
            \})
      Assert Equals(blameobj.lineinfos[1], {
            \ 'revision': '8a7be73ccc36d10526ec3d31a4fde1043815a784',
            \ 'linenum': {
            \   'original': 2,
            \   'final': 2,
            \ },
            \ 'nlines': 1,
            \ 'contents': '==============================================================================',
            \})
    End

    It should call {callback} with [{revisions}, {lineinfo}] each after parsing lineinfo
      let result = BlameParser.parse(blame, function('VitalGitBlameParserCallback'))
      Assert Equals(len(g:VitalGitBlameParserCalledWith), 134)
      Assert Equals(g:VitalGitBlameParserCalledWith[0], [
            \ result.revisions,
            \ result.lineinfos[0],
            \])
      Assert Equals(g:VitalGitBlameParserCalledWith[1], [
            \ result.revisions,
            \ result.lineinfos[1],
            \])
    End
  End

  Describe .parse_to_chunks({blame}[, {callback}])
    It should parse a blame output and return chunks
      let blameobj = BlameParser.parse_to_chunks(blame)
      Assert KeyExists(blameobj, 'revisions')
      Assert KeyExists(blameobj, 'chunks')
      Assert Equals(len(blameobj.revisions), 6)
      Assert Equals(blameobj.revisions['b6046d9340852c570b9cad13bbdddd2dd5bac8f8'], {
            \ 'author': 'lambdalisue',
            \ 'author_mail': '<lambdalisue@hashnote.net>',
            \ 'author_time': '1426159163',
            \ 'author_tz': '+0900',
            \ 'committer': 'lambdalisue',
            \ 'committer_mail': '<lambdalisue@hashnote.net>',
            \ 'committer_time': '1426159163',
            \ 'committer_tz': '+0900',
            \ 'summary': 'travis-ci use Vim 7.3.',
            \ 'previous': '8eacdabdd0765e910b59662c36d73401e3fda9e8 README.md',
            \ 'filename': 'README.md',
            \})
      Assert Equals(blameobj.revisions['8a7be73ccc36d10526ec3d31a4fde1043815a784'], {
            \ 'author': 'lambdalisue',
            \ 'author_mail': '<lambdalisue@hashnote.net>',
            \ 'author_time': '1419974246',
            \ 'author_tz': '+0900',
            \ 'committer': 'lambdalisue',
            \ 'committer_mail': '<lambdalisue@hashnote.net>',
            \ 'committer_time': '1419974356',
            \ 'committer_tz': '+0900',
            \ 'summary': 'Initial',
            \ 'boundary': 1,
            \ 'filename': 'README.md',
            \})
      Assert Equals(blameobj.revisions['d0af4b00b66f56a4a560e41968f3e362df3c1a0e'], {
            \ 'author': 'lambdalisue',
            \ 'author_mail': '<lambdalisue@hashnote.net>',
            \ 'author_time': '1426159219',
            \ 'author_tz': '+0900',
            \ 'committer': 'lambdalisue',
            \ 'committer_mail': '<lambdalisue@hashnote.net>',
            \ 'committer_time': '1426159219',
            \ 'committer_tz': '+0900',
            \ 'summary': 'Fix Markdown',
            \ 'previous': 'b6046d9340852c570b9cad13bbdddd2dd5bac8f8 README.md',
            \ 'filename': 'README.md',
            \})
      Assert Equals(len(blameobj.chunks), 19)
      Assert Equals(blameobj.chunks[0], {
            \ 'revision': 'b6046d9340852c570b9cad13bbdddd2dd5bac8f8',
            \ 'linenum': {
            \   'original': 1,
            \   'final': 1,
            \ },
            \ 'nlines': 1,
            \ 'index': 0,
            \ 'contents': [
            \   'vital-VCS-Git [![Build Status](https://travis-ci.org/lambdalisue/vital-VCS-Git.svg)](https://travis-ci.org/lambdalisue/vital-VCS-Git)',
            \ ]
            \})
      Assert Equals(blameobj.chunks[1], {
            \ 'revision': '8a7be73ccc36d10526ec3d31a4fde1043815a784',
            \ 'linenum': {
            \   'original': 2,
            \   'final': 2,
            \ },
            \ 'nlines': 1,
            \ 'index': 1,
            \ 'contents': [
            \   '==============================================================================',
            \ ]
            \})
      Assert Equals(blameobj.chunks[2], {
            \ 'revision': '8a7be73ccc36d10526ec3d31a4fde1043815a784',
            \ 'linenum': {
            \   'original': 4,
            \   'final': 3,
            \ },
            \ 'nlines': 5,
            \ 'index': 2,
            \ 'contents': [
            \   '',
            \   'A fundamental git manipulation library.',
            \   '',
            \   '- Version:  0.1.0',
            \   '- Author:   Alisue <lambdalisue@hashnote.net>',
            \ ]
            \})
    End

    It should call {callback} with [{revisions}, {lineinfo}] each after parsing lineinfo
      let result = BlameParser.parse_to_chunks(blame, function('VitalGitBlameParserCallback'))
      Assert Equals(len(g:VitalGitBlameParserCalledWith), 19)
      Assert Equals(g:VitalGitBlameParserCalledWith[0], [
            \ result.revisions,
            \ result.chunks[0],
            \])
      Assert Equals(g:VitalGitBlameParserCalledWith[1], [
            \ result.revisions,
            \ result.chunks[1],
            \])
    End
  End
End

