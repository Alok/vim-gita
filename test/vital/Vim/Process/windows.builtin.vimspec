scriptencoding utf-8

let s:V = vital#of('vital')
let s:Prelude = s:V.import('Prelude')
let s:Path = s:V.import('System.Filepath')
let s:Process = s:V.import('Vim.Process')
let s:testdata = 'test/vital/_testdata/Vim/Process/'

if !s:Prelude.is_windows()
  finish
endif

Describe Vim.Process
  Before
    let Process = s:Process
    set verbose=1
  End
  After
    set verbose&
  End
  Describe .system({args}[, {input}, {timeout}, {options}])
    Context [builtin]
      Before
        let options = {
              \ 'use_vimproc': 0,
              \}
      End
      Context with List {args}
        It executes command without spaces
          let args = ['ECHO', 'hello']
          Assert Equal(Process.system(args, options), "hello\n")
        End
        It executes command with spaces
          let args = ['ECHO', 'h e l l o']
          " NOTE:
          " Argument (%X) in Windows contains a leading and a trailing "
          Assert Equal(Process.system(args, options), '"h e l l o"' . "\n")
        End
        It executes command with enclosed spaces
          let args = ['ECHO', '"h e l l o"']
          " NOTE:
          " Argument (%X) in Windows contains a leading and a trailing "
          Assert Equal(Process.system(args, options), '"h e l l o"' . "\n")
        End
        It executes command with non ascii characters
          let args = ['ECHO', 'あいうえお']
          Assert Equal(Process.system(args, options), "あいうえお\n")

          let args = ['ECHO', 'あ い う え お']
          Assert Equal(Process.system(args, options), "あ い う え お\n")
        End
        It executes command without spaces (filename)
          let args = ['TYPE', s:Path.realpath(s:testdata . 'test.txt')]
          Assert Equal(Process.system(args, options), "test\n")
        End
        It executes command with spaces (filename)
          let args = ['TYPE', s:Path.realpath(s:testdata . 't e s t.txt')]
          Assert Equal(Process.system(args, options), "test\n")
        End
        It executes command with non ascii characters (filename)
          " NOTE:
          " output should not be encoded while the file is utf-8
          let options.encode_output = 0
          let args = ['TYPE', s:Path.realpath(s:testdata . 'テスト.txt')]
          Assert Equal(Process.system(args, options), "テスト\n")
          let args = ['TYPE', s:Path.realpath(s:testdata . 'テ ス ト.txt')]
          Assert Equal(Process.system(args, options), "テスト\n")
        End
      End

      Context with String {args}
        It executes command without spaces
          let args = 'ECHO hello'
          Assert Equal(Process.system(args, options), "hello\n")
        End
        It executes command with spaces
          let args = 'ECHO "h e l l o"'
          " NOTE:
          " Argument (%X) in Windows contains a leading and a trailing "
          " NOTE:
          " But with vimproc, the result is more similar to unix somehow...
          Assert Equal(Process.system(args, options), '"h e l l o"' . "\n")
        End
        It executes command with non ascii characters
          let args = 'ECHO あいうえお'
          Assert Equal(Process.system(args, options), "あいうえお\n")

          let args = 'ECHO "あ い う え お"'
          Assert Equal(Process.system(args, options), '"あ い う え お"' . "\n")
        End
        It executes command without spaces (filename)
          let args = printf('TYPE %s',
                \ s:Path.realpath(s:testdata . 'test.txt')
                \)
          Assert Equal(Process.system(args, options), "test\n")
        End
        It executes command with spaces (filename)
          let args = printf('TYPE "%s"',
                \ s:Path.realpath(s:testdata . 't e s t.txt')
                \)
          Assert Equal(Process.system(args, options), "test\n")
        End
        It executes command with non ascii characters (filename)
          " NOTE:
          " output should not be encoded while the file is utf-8
          let options.encode_output = 0
          let args = printf('TYPE %s',
                \ s:Path.realpath(s:testdata . 'テスト.txt')
                \)
          Assert Equal(Process.system(args, options), "テスト\n")

          let args = printf('TYPE "%s"',
                \ s:Path.realpath(s:testdata . 'テ ス ト.txt')
                \)
          Assert Equal(Process.system(args, options), "テスト\n")
        End
      End
    End
  End
End
