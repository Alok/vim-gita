let s:V = vital#of('vital')

function! VitalProgressBarLet(dict, name, value) abort
  let a:dict[a:name] = a:value
endfunction

Describe ProgressBar
  Before
    let ProgressBar = s:V.import('ProgressBar')
  End

  Describe .new({maxvalue}[, {options}])
    It returns a progressbar instance with {maxvalue}
      let progressbar = ProgressBar.new(100)
      Assert KeyExists(progressbar, 'maxvalue')
      Assert KeyExists(progressbar, 'current')
      Assert KeyExists(progressbar, 'format')
      Assert KeyExists(progressbar, 'prefix')
      Assert KeyExists(progressbar, 'suffix')
      Assert KeyExists(progressbar, 'construct')
      Assert KeyExists(progressbar, 'redraw')
      Assert KeyExists(progressbar, 'update')
      Assert KeyExists(progressbar, 'exit')
      " Several options are readonly
      let readonly_options = [
            \ 'maxvalue', 'barwidth', 'alpha', 'nullchar', 'fillchar',
            \ 'nullbar', 'fillbar', 'method',
            \]
      for name in readonly_options
        Throws /E741: Value is locked:/ VitalProgressBarLet(progressbar, name, 0)
      endfor
    End

    It initialize required parameters from {maxvalue} and {options}
      let progressbar = ProgressBar.new(100, {
            \ 'barwidth': 100,
            \ 'nullchar': '.',
            \ 'fillchar': '|',
            \})
      Assert Equals(progressbar.maxvalue, 100)
      Assert Equals(progressbar.barwidth, 100)
      Assert Equals(progressbar.alpha, 1)
      Assert Equals(progressbar.nullbar, repeat('.', 100))
      Assert Equals(progressbar.fillbar, repeat('|', 100))

      let progressbar = ProgressBar.new(100, {
            \ 'barwidth': 50,
            \ 'nullchar': '.',
            \ 'fillchar': '|',
            \})
      Assert Equals(progressbar.maxvalue, 100)
      Assert Equals(progressbar.barwidth, 50)
      Assert Equals(progressbar.alpha, 0.5)
      Assert Equals(progressbar.nullbar, repeat('.', 50))
      Assert Equals(progressbar.fillbar, repeat('|', 50))
    End

    It throws an exception when 'method' is invalid
      Throws /"foobar" is not a valid method/
            \ ProgressBar.new(100, { 'method': 'foobar' })
    End
  End

  Context An instance
    Describe .construct({value})
      It returns a indicator string from {value}
        let progressbar = ProgressBar.new(100, {
              \ 'barwidth': 10,
              \ 'nullchar': '.',
              \ 'fillchar': '|',
              \ 'format': '%(fill)s%(null)s',
              \})
        Assert Equals(progressbar.construct(0),  '..........')
        Assert Equals(progressbar.construct(1),  '|.........')

        Assert Equals(progressbar.construct(10), '|.........')
        Assert Equals(progressbar.construct(11), '||........')
        Assert Equals(progressbar.construct(20), '||........')
        Assert Equals(progressbar.construct(21), '|||.......')
        Assert Equals(progressbar.construct(30), '|||.......')

        Assert Equals(progressbar.construct(90),  '|||||||||.')
        Assert Equals(progressbar.construct(91),  '||||||||||')
        Assert Equals(progressbar.construct(100), '||||||||||')
      End

      It returns a indicator with specified {options.format} in .new() method
        let progressbar = ProgressBar.new(100, {
              \ 'barwidth': 10,
              \ 'nullchar': '.',
              \ 'fillchar': '|',
              \ 'format': 'foobar',
              \})
        Assert Equals(progressbar.construct(0),  'foobar')
      End

      It returns a indicator with a substituted %(prefix)s
        let progressbar = ProgressBar.new(100, {
              \ 'barwidth': 10,
              \ 'nullchar': '.',
              \ 'fillchar': '|',
              \ 'format': '%(prefix)s',
              \ 'prefix': 'foobar',
              \})
        Assert Equals(progressbar.construct(0),  'foobar')
      End

      It returns a indicator with a substituted %(suffix)s
        let progressbar = ProgressBar.new(100, {
              \ 'barwidth': 10,
              \ 'nullchar': '.',
              \ 'fillchar': '|',
              \ 'format': '%(suffix)s',
              \ 'suffix': 'foobar',
              \})
        Assert Equals(progressbar.construct(0),  'foobar')
      End

      It returns a indicator with a substituted %(percent)s
        let progressbar = ProgressBar.new(100, {
              \ 'barwidth': 10,
              \ 'nullchar': '.',
              \ 'fillchar': '|',
              \ 'format': '%(percent)s',
              \})
        Assert Equals(progressbar.construct(0),  '0')
        Assert Equals(progressbar.construct(1),  '1')
        Assert Equals(progressbar.construct(10),  '10')
        Assert Equals(progressbar.construct(20),  '20')
        Assert Equals(progressbar.construct(100),  '100')
      End
    End
  End
End
