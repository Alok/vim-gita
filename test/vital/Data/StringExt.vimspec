let s:V = vital#of('vital')
let s:Prelude = s:V.import('Prelude')
let s:is_windows = s:Prelude.is_windows()

Describe Data.StringExt
  Before
    let StringExt = s:V.import('Data.StringExt')
  End

  Context .smart_string({value})
    It should return {value} if {value} is string
      let exp = 'foobar'
      let ret = StringExt.smart_string(exp)
      Assert Equals(exp, ret)
      Assert Same(exp, ret)
    End

    It should return an empty string if {value} is 0
      let ret = StringExt.smart_string(0)
      Assert Equals(ret, '')
    End

    It should return an empty string if {value} is an empty list
      let ret = StringExt.smart_string([])
      Assert Equals(ret, '')
    End

    It should return an empty string if {value} is an empty dictionary
      let ret = StringExt.smart_string({})
      Assert Equals(ret, '')
    End

    It should return a string({value}) if {value} is number
      let ret = StringExt.smart_string(1)
      Assert Equals(ret, string(1))
    End

    It should return a string({value}) if {value} is list
      let ret = StringExt.smart_string(['foo'])
      Assert Equals(ret, string(['foo']))
    End

    It should return a string({value}) if {value} is dictionary
      let ret = StringExt.smart_string({'foo': 'bar'})
      Assert Equals(ret, string({'foo': 'bar'}))
    End

    It should return a string({value}) if {value} is otherwise (e.g. funcref)
      let ret = StringExt.smart_string(StringExt.smart_string)
      let exp = string(StringExt.smart_string)
      Assert Equals(ret, exp)
    End
  End

  Context .format({format}, {format_map}, {data})
    It should return an empty string if an empty {format} is given
      let ret = StringExt.format('', {}, {})
      Assert Equals(ret, '')
    End

    It should return a formatted string
      let format = '%foo %bar %hoge'
      let format_map = {
            \ 'foo': 'foo_value',
            \ 'bar': 'bar_value',
            \ 'hoge': 'hoge_value',
            \}
      let data = {
            \ 'foo_value': 'Hello',
            \ 'bar_value': 'Good',
            \ 'hoge_value': 'Bye',
            \}
      let ret = StringExt.format(format, format_map, data)
      Assert Equals(ret, 'Hello Good Bye')
    End

    It should add <left> value of %{<left>}<key> format if <key> is not empty
      let format = '%{Very }bar'
      let format_map = {
            \ 'bar': 'bar_value',
            \}
      let data = {
            \ 'bar_value': 'Good',
            \}
      let ret = StringExt.format(format, format_map, data)
      Assert Equals(ret, 'Very Good')
    End

    It should NOT add <left> value of %{<left>}<key> format if <key> is empty
      let format = '%{Very }bar'
      let format_map = {
            \ 'bar': 'bar_value',
            \}
      let data = {
            \ 'bar_value': '',
            \}
      let ret = StringExt.format(format, format_map, data)
      Assert Equals(ret, '')
    End

    It should add <right> value of %{|<right>}<key> format if <key> is not empty
      let format = '%{| Bye}bar'
      let format_map = {
            \ 'bar': 'bar_value',
            \}
      let data = {
            \ 'bar_value': 'Good',
            \}
      let ret = StringExt.format(format, format_map, data)
      Assert Equals(ret, 'Good Bye')
    End

    It should NOT add <right> value of %{|<right>}<key> format if <key> is empty
      let format = '%{| Bye}bar'
      let format_map = {
            \ 'bar': 'bar_value',
            \}
      let data = {
            \ 'bar_value': '',
            \}
      let ret = StringExt.format(format, format_map, data)
      Assert Equals(ret, '')
    End

    It should add <left> and <right> value of %{<left>|<right>}<key> format if <key> is not empty
      let format = '%{Hello | Bye}bar'
      let format_map = {
            \ 'bar': 'bar_value',
            \}
      let data = {
            \ 'bar_value': 'Good',
            \}
      let ret = StringExt.format(format, format_map, data)
      Assert Equals(ret, 'Hello Good Bye')
    End

    It should NOT add <left> and <right> value of %{<left>|<right>}<key> format if <key> is empty
      let format = '%{Hello | Bye}bar'
      let format_map = {
            \ 'bar': 'bar_value',
            \}
      let data = {
            \ 'bar_value': '',
            \}
      let ret = StringExt.format(format, format_map, data)
      Assert Equals(ret, '')
    End

    It should call a function specified n {format_map}
      let format = '%foo %bar'
      let format_map = {
            \ 'foo': 'foo_value',
            \}
      function! format_map.bar(data) abort
        let self._bar = 'bar'
        return toupper(a:data.bar_value)
      endfunction
      let data = {
            \ 'foo_value': 'Hello',
            \ 'bar_value': 'Goodbye',
            \}
      let ret = StringExt.format(format, format_map, data)
      Assert Equals(ret, 'Hello GOODBYE')
      Assert Equals(format_map._bar, 'bar')
    End
  End

  Context .remove_ansi_sequences({val})
    It should remove ANSI sequences in {val}
      let val = "\033[47m\033[32mGreen\033[0m"
      let ret = StringExt.remove_ansi_sequences(val)
      Assert Equals(ret, 'Green')
    End
  End

  Describe .unescape({string}, {chars})
    It unescape escaped {chars} in {string}
      Assert Equals(
            \ StringExt.unescape('\\\^\*\a\b\[\]', '\^*[]'),
            \ '\^*\a\b[]',
            \)
      Assert Equals(
            \ StringExt.unescape('\*n\*n\*n', '*'),
            \ '*n*n*n',
            \)
      Assert Equals(
            \ StringExt.unescape('\\n\\n\\n', '\'),
            \ '\n\n\n',
            \)
      Assert Equals(
            \ StringExt.unescape('\\\\n\\\\n\\\\n', '\'),
            \ '\\n\\n\\n',
            \)
    End
  End
  Describe .escape_regex({string})
    It escape characters which may affect regex
      Assert Equals(StringExt.escape_regex('^\a\b.*$'), '\^\\a\\b\.\*\$')
    End
    It won't escape characters when the characters are already escaped
      Assert Equals(
            \ StringExt.escape_regex('^\a\b.*$'),
            \ StringExt.escape_regex(StringExt.escape_regex('^\a\b.*$')),
            \)
    End
    It escape Windows like path well
      Assert Equals(
            \ StringExt.escape_regex('C:\Windows\Test.txt'),
            \ 'C:\\Windows\\Test\.txt',
            \)
      Assert Equals(
            \ StringExt.escape_regex('C:\\Windows\\Test.txt'),
            \ 'C:\\Windows\\Test\.txt',
            \)
    End
  End
End

