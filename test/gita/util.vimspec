let s:V = vital#of('vital')
let s:Path = s:V.import('System.Filepath')
let s:Guard = s:V.import('Vim.Guard')

Describe gita#util
  Describe #define_variables({prefix}, {defaults})
    Before
      let guard = s:Guard.store(
            \ 'g:gita#foo',
            \ 'g:gita#bar',
            \ 'g:gita#hello#foo',
            \ 'g:gita#hello#bar',
            \)
    End
    After
      call guard.restore()
    End

    It define 'g:gita#{key}' variables when {prefix} is empty
      let defaults = {
            \ 'foo': 'bar',
            \ 'bar': 0,
            \}
      let ret = gita#util#define_variables('', defaults)
      Assert exists('g:gita#foo')
      Assert exists('g:gita#bar')

      Assert Equals(g:gita#foo, defaults.foo)
      Assert Equals(g:gita#bar, defaults.bar)
    End

    It define 'g:gita#{prefix}#{key}' variables when {prefix} is NOT empty
      let defaults = {
            \ 'foo': 'bar',
            \ 'bar': 0,
            \}
      let ret = gita#util#define_variables('hello', defaults)
      Assert exists('g:gita#hello#foo')
      Assert exists('g:gita#hello#bar')

      Assert Equals(g:gita#hello#foo, defaults.foo)
      Assert Equals(g:gita#hello#bar, defaults.bar)
    End

    It won't overwrite the existing variables
      let defaults = {
            \ 'foo': 'bar',
            \ 'bar': 0,
            \}
      let g:gita#foo = 'hello'
      let g:gita#bar = 1
      let ret = gita#util#define_variables('', defaults)
      Assert exists('g:gita#foo')
      Assert exists('g:gita#bar')

      Assert Equals(g:gita#foo, 'hello')
      Assert Equals(g:gita#bar, 1)
    End
  End

  Describe #matchdict({expr}, {pattern}, {scheme})
    It returns an empty dictionary if {expr} does not match {pattern}
      let ret = gita#util#matchdict('foo', 'bar', {})
      Assert Equals(ret, {})
    End

    It returns a dictionary which constructed from {pattern} and {scheme}
      let expr = 'gita://vim-gita:diff:cached:reverse/HEAD:README.md'
      let pattern = '^gita://\([^/:]\{-}\):\([^/:]\{-}\):\([^/]\{-}\)/\(.\+\)$'
      let scheme = {
            \ 'refname': 1,
            \ 'content_type': 2,
            \ 'extra_option': 3,
            \ 'treeish': 4,
            \}
      let ret = gita#util#matchdict(expr, pattern, scheme)
      Assert Equals(ret, {
            \ 'refname': 'vim-gita',
            \ 'content_type': 'diff',
            \ 'extra_option': 'cached:reverse',
            \ 'treeish': 'HEAD:README.md',
            \})
    End
  End
End
