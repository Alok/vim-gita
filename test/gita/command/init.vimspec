Describe gita#command#init
  Before all
    let V = vital#of('vital')
    let Path = V.import('System.Filepath')
    let Guard = V.import('Vim.Guard')
    let ScriptLocal = V.import('Vim.ScriptLocal')
    let ProcessMock = V.import('System.Process.Mock')
    let guard = Guard.store('g:gita#process#options')
    let sf = ScriptLocal.sfuncs(
          \ Path.realpath('autoload/gita/command/init.vim')
          \)
    let g:gita#process#options = {
          \ 'clients': [deepcopy(ProcessMock)]
          \}
    " the line below is required to load requirements before :redir
    silent Gita init
  End

  After all
    call guard.restore()
  End

  Describe s:args_from_options({git}, {options})
    It returns a {args} List of {options}
      new
      let options = {
            \ 'bare': 1,
            \ 'template': 1,
            \ 'separate-git-dir': 1,
            \ 'shared': 1,
            \ '__unknown__': [
            \   '%',
            \   'a',
            \   'b',
            \ ],
            \}
      let git = gita#core#get_or_fail()
      let ret = sf.args_from_options(git, options)
      Assert Equals(ret, [
            \ 'init',
            \ '--bare',
            \ '--separate-git-dir',
            \ '--shared',
            \ '--template',
            \])
    End

    It ignores unknown attributes in {options}
      let options = {
            \ 'foobar': 1,
            \}
      let git = gita#core#get_or_fail()
      let ret = sf.args_from_options(git, options)
      Assert Equals(ret, [
            \ 'init',
            \])
    End
  End

  Describe #command({bang}, {range}, {args})
    It executes 'git init' for 'Gita init'
      redir => content
        silent! execute 'Gita init'
      redir END
      Assert Match(content, '^\nOK: git .* init')
    End

    It executes 'git init --bare' for 'Gita init --bare'
      redir => content
        silent! execute 'Gita init --bare'
      redir END
      Assert Match(content, '^\nOK: git .* init --bare')
    End
  End
End

