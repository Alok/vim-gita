Describe gita#command#add
  Before all
    let V = vital#of('vital')
    let String = V.import('Data.String')
    let Path = V.import('System.Filepath')
    let Guard = V.import('Vim.Guard')
    let ScriptLocal = V.import('Vim.ScriptLocal')
    " the line below is required to load requirements before :redir
    silent Gita add
  End

  Before
    let sf = ScriptLocal.sfuncs(
          \ Path.realpath('autoload/gita/command/add.vim')
          \)
    let guard = Guard.store('g:gita#process#options')
    let g:gita#process#options = {
          \ 'clients': [deepcopy(V.import('System.Process.Mock'))],
          \}
  End

  After
    call guard.restore()
  End

  Describe s:args_from_options({git}, {options})
    It returns a {args} List of {options}
      new foobar.txt
      let options = {
            \ 'dry-run': 1,
            \ 'force': 1,
            \ 'update': 1,
            \ 'intent-to-add': 1,
            \ 'all': 1,
            \ 'ignore-removal': 1,
            \ 'refresh': 1,
            \ 'ignore-errors': 1,
            \ 'ignore-missing': 1,
            \ '__unknown__': [
            \   '%',
            \   'a',
            \   'b',
            \ ],
            \}
      let git = gita#core#get_or_fail()
      let ret = sf.args_from_options(git, options)
      Assert Equals(ret, [
            \ 'add',
            \ '--verbose',
            \ '--all',
            \ '--dry-run',
            \ '--force',
            \ '--ignore-errors',
            \ '--ignore-missing',
            \ '--ignore-removal',
            \ '--intent-to-add',
            \ '--refresh',
            \ '--update',
            \ '--',
            \ expand('%:p'),
            \ fnamemodify('.', ':p') . 'a',
            \ fnamemodify('.', ':p') . 'b',
            \])
    End

    It ignores unknown attributes in {options}
      let options = {
            \ 'foobar': 1,
            \}
      let git = gita#core#get_or_fail()
      let ret = sf.args_from_options(git, options)
      Assert Equals(ret, [
            \ 'add',
            \ '--verbose',
            \ '--',
            \])
    End
  End

  Describe #command({bang}, {range}, {args})
    It executes 'git add --verbose --' for 'Gita add'
      redir => content
        silent! verbose execute 'Gita add'
      redir END
      Assert Match(content, 'git .* add --verbose --')
    End

    It executes 'git add --verbose -- .' for 'Gita add .'
      redir => content
        silent! verbose execute 'Gita add .'
      redir END
      Assert Match(content, 'git .* add --verbose -- .')
    End

    It executes 'git add --verbose -- {path}' for 'Gita add %'
      redir => content
        silent! verbose execute 'Gita add %'
      redir END
      let path = String.escape_pattern(fnameescape(expand('%:p')))
      Assert Match(content, 'git .* add --verbose -- ' . path)
    End

    It executes 'git add --verbose --force -- {path}' for 'Gita add --force %'
      redir => content
        silent! verbose execute 'Gita add --force %'
      redir END
      let path = String.escape_pattern(fnameescape(expand('%:p')))
      Assert Match(content, 'git .* add --verbose --force -- ' . path)
    End
  End
End
